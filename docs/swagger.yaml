basePath: /api
definitions:
  handler.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  product.InputProduct:
    properties:
      name:
        type: string
      price:
        type: number
    required:
    - name
    - price
    type: object
  product.Product:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Go API 4IW3  is a sample application for a university project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go API 4IW3
  version: "1.0"
paths:
  /product:
    get:
      consumes:
      - application/json
      description: get all products
      parameters:
      - description: get all products
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: add product
      parameters:
      - description: Add product
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.InputProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Post a new product
      tags:
      - products
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Show an product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product by ID
      parameters:
      - description: update product
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.InputProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Update a product
      tags:
      - products
swagger: "2.0"
